# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from selenium import webdriver
from time import sleep
import sys
import logging
import sqlite3
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from PyQt5.QtWidgets import QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QThread, pyqtSignal

login_status = [False]
login_detail = {'username':'', 'token':''}
logging.basicConfig(filename="log.txt",
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.DEBUG)

user_agent = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.50 Safari/537.36'
options = Options()
options.add_argument('--headless')
options.add_argument('--disable-gpu')
options.add_argument("--window-size=1920,1080")
options.add_argument(f'user-agent={user_agent}')
driver = webdriver.Chrome(options=options)
wait = WebDriverWait(driver, 30)

class TokenThread(QThread):
    update_progress = pyqtSignal(str)
    def __init__(self,parent=None, do_create_data=True, token_in='', username=''):
        super(TokenThread,self).__init__(parent)
        self.token_in = token_in
        self.username = username
        
    def run(self):
        
        con = sqlite3.connect("test.db")
        cur = con.cursor()
        params = (self.token_in,self.username)
        try :  
            print(cur.execute("SELECT * FROM user WHERE user_token==? AND username==?",params))
            user = cur.execute("SELECT * FROM user WHERE user_token==? AND username==?",params).fetchall()
            print(user[0][3],user[0][4])
            if user[0][3] >= user[0][4] :
                return self.update_progress.emit('Token Expired ðŸ¦•')
            # self.update_progress.emit('Token Validated :) âœ”')
            login_status[0] = True
            print(login_status[0])
            return self.update_progress.emit('Token Validated âœ”')
        except:
            return self.update_progress.emit('Invalid username or Token')
        
class QrThread(QThread):
    update_progress = pyqtSignal(str)
    def __init__(self,parent=None):
        super(QrThread,self).__init__(parent)
        
    def run(self):
        if login_status[0] == False :
            return self.update_progress.emit('< Insert your token first >')

        try:
            driver.get("https://web.whatsapp.com/")
            try :
                element = wait.until(EC.presence_of_element_located((By.XPATH, "/html/body/div[1]/div/div/div[3]/div[1]/div/div/div[2]/div/div")))
            except :
                self.update_progress.emit('Could not find Whatsapp Logo !')
            try :
                element = driver.find_element(By.XPATH,'/html/body/div[1]/div/div/div[3]/div[1]')
            except:
                self.update_progress.emit('Could not find QRcode !')
            element.screenshot('test.png')
            self.update_progress.emit('Qrcode Updated !')
        except:
            self.update_progress.emit('Can not reach Whatsapp.com !')
            
class SendThread(QThread):
    update_progress = pyqtSignal(str)
    error_handler = pyqtSignal(str)
    def __init__(self,parent=None, token_in='', username=''):
        super(SendThread,self).__init__(parent)
        self.token_in = token_in
        self.username = username
    def run(self):
        if login_status[0] == False :
            return self.error_handler.emit('< Insert your token first >')
        con = sqlite3.connect("test.db")
        cur = con.cursor()
        params = (self.token_in,self.username)
        user = cur.execute("SELECT * FROM user WHERE user_token==? AND username==?",params).fetchall()
        charge = user[0][3]
        plan = user[0][4]
        if login_status[0] == False :
            return self.update_progress.emit('< Insert your token first >')
        elif charge >= plan:
            return self.update_progress.emit(f'< You sent {charge} messages. Buy new token plz >')
            
        sleep(3)
        message = """
            Salam
        """
        phone_numbers = open("test-numbers.txt").read().split("\n")
        count = 0
        if len(phone_numbers) == 0:
            return self.update_progress.emit('Please Add New Phone Numbers')
        
        for phone in phone_numbers:
            if charge >= plan:
                return self.update_progress.emit(f'< You sent {charge} messages. Buy new token plz >')
            pn = phone
            self.update_progress.emit('sending to : '+ pn)
            url = f'https://web.whatsapp.com/send?phone=+98{phone[1:]}&text={message}'
            sleep(3)
            try:
                driver.get(url)
                try:
                    driver.find_element(By.XPATH,'/html/body/div[1]/div/div/div[3]/div[1]/div/div/div[1]/div[1]')
                    self.update_progress.emit('You are not Login !')
                except:
                    try :
                        element = wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="main"]/footer/div[1]/div/span[2]/div/div[2]/div[2]/button')))
                        driver.find_element(By.XPATH,
                                            '//*[@id="main"]/footer/div[1]/div/span[2]/div/div[2]/div[2]/button').click()
                        self.update_progress.emit('Sent ðŸ˜Š')
                        print(params[0])
                        cur.execute("UPDATE user SET charge=charge+1 WHERE user_token =? ",params[0])
                        con.commit()
                        
                        print('done')
                        
                        with open('sent-numbers.txt', 'a') as f:
                            f.write(phone + "\n")
                    except: 
                        self.update_progress.emit('Could not find Send button ! \n or Contact not found !')           
                count += 1
                
            except:
                self.update_progress.emit("asdfdfa")
                


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 500)
        MainWindow.setMinimumSize(QtCore.QSize(1200, 500))
        MainWindow.setMaximumSize(QtCore.QSize(1200, 500))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        ####################  verticalLayout_1  left Menu ####################
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 171, 511))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.menu = QtWidgets.QWidget(self.verticalLayoutWidget)
        self.menu.setObjectName("menu")
        ####################  loginButton ####################
        self.loginButton = QtWidgets.QPushButton(self.menu)
        self.loginButton.setGeometry(QtCore.QRect(20, 10, 131, 71))
        self.loginButton.setObjectName("loginButton")
        self.loginButton.clicked.connect(self.loginUI)
        ####################  tokenButton ####################
        self.tokenButton = QtWidgets.QPushButton(self.menu)
        self.tokenButton.setGeometry(QtCore.QRect(20, 100, 131, 71))
        self.tokenButton.setObjectName("tokenButton")
        self.tokenButton.clicked.connect(self.tokenUI)
        ####################  exitButton ####################
        self.exitButton = QtWidgets.QPushButton(self.menu)
        self.exitButton.setGeometry(QtCore.QRect(20, 450, 131, 31))
        self.exitButton.setObjectName("exitButton")
        ####################  logButton ####################
        self.logButton = QtWidgets.QPushButton(self.menu)
        self.logButton.setGeometry(QtCore.QRect(20, 420, 131, 31))
        self.logButton.setObjectName("logButton")
        ####################  aboutButton ####################
        self.aboutButton = QtWidgets.QPushButton(self.menu)
        self.aboutButton.setGeometry(QtCore.QRect(20, 280, 131, 71))
        self.aboutButton.setObjectName("aboutButton")
        ####################  settingButton ####################
        self.settingButton = QtWidgets.QPushButton(self.menu)
        self.settingButton.setGeometry(QtCore.QRect(20, 190, 131, 71))
        self.settingButton.setObjectName("settingButton")
        ####################  verticalLayout_2  Right side ####################
        self.verticalLayout.addWidget(self.menu)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(179, 0, 1200, 500))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.main = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.main.setObjectName("main")
        ####################  usage   ####################
        self.usage = QtWidgets.QLabel(self.main)
        self.usage.setGeometry(QtCore.QRect(320, 190, 301, 71))
        self.usage.setObjectName("usage")
        ####################  label   ####################
        self.label = QtWidgets.QLabel(self.main)
        self.label.setGeometry(QtCore.QRect(270, 140, 71, 31))
        self.label.setObjectName("label")
        self.author = QtWidgets.QLabel(self.main)
        self.author.setGeometry(QtCore.QRect(10, 455, 61, 16))
        self.author.setObjectName("author")
        self.verticalLayout_2.addWidget(self.main)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1200, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        QtWidgets.QMessageBox
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    # Buttons Actions

    def loginUI(self):
        _translate = QtCore.QCoreApplication.translate
        self.verticalLayout_2.removeWidget(self.main)
        # configure Buttons
        self.loginButton.setDisabled(True)
        self.tokenButton.setEnabled(True)
        self.aboutButton.setEnabled(True)
        self.settingButton.setEnabled(True)
        ######################################
        self.main = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.main.setObjectName("main")
        #############      counterlabel     ###################   
        self.counterlabel = QtWidgets.QLabel(self.main)
        self.counterlabel.setGeometry(QtCore.QRect(500, 20, 131, 41))
        self.counterlabel.setObjectName("counterlabel")
        
        #############      sendButton     ###################
        self.sendButton = QtWidgets.QPushButton(self.main)
        self.sendButton.setGeometry(QtCore.QRect(10, 10, 141, 51))
        self.sendButton.setObjectName("sendButton")
        self.sendButton.clicked.connect(self.sendUI)
        
        #############      retryButton     ###################
        self.retryButton = QtWidgets.QPushButton(self.main)
        self.retryButton.setGeometry(QtCore.QRect(150, 10, 141, 51))
        self.retryButton.setObjectName("retryButton")
        self.retryButton.clicked.connect(self.loginUI)
        #############      Login Thread     ####################
        self.login = QrThread()
        self.login.start()
        self.login.update_progress.connect(self.qr_update)
        
        #############      qrlabel     ####################
        self.qrlabel = QtWidgets.QLabel(self.main)
        self.qrlabel.setGeometry(QtCore.QRect(6, 80, 1181, 500))
        self.qrlabel.maximumSize()
        self.qrlabel.setScaledContents(True)
        self.qrlabel.setText("QRcode")
        img = QtGui.QPixmap("/wtf.jpg")
        self.qrlabel.setPixmap(img)
        self.qrlabel.setStyleSheet("background-image : url(test.png);")
        self.qrlabel.resize(1000, 438)
        self.qrlabel.setObjectName("qrlabel")
        ##########################################
        self.verticalLayout_2.addWidget(self.main) 
        self.counterlabel.setText(_translate("MainWindow", "x sec left"))
        self.sendButton.setText(_translate("MainWindow", "Send"))
        self.retryButton.setText(_translate("MainWindow", "Retry"))

    def qr_update(self,message):
        self.loginButton.setEnabled(True)
        self.tokenButton.setEnabled(True)
        self.aboutButton.setEnabled(True)
        self.settingButton.setEnabled(True)
        self.msg = QMessageBox()
        self.msg.setText(message)
        self.msg.setWindowTitle("Info")
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.exec()
        self.img = QtGui.QPixmap("/wtf.jpg")
        self.qrlabel.setPixmap(self.img)
        self.qrlabel.setStyleSheet("background-image : url(test.png);")

    def sendUI(self):

        _translate = QtCore.QCoreApplication.translate
        self.verticalLayout_2.removeWidget(self.main)
        self.main = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.main.setObjectName("main")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.main)
        self.plainTextEdit.setGeometry(QtCore.QRect(100, 80, 681, 261))
        self.plainTextEdit.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.plainTextEdit.setFrameShadow(QtWidgets.QFrame.Plain)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit.setReadOnly(True)
        
        self.send = SendThread(token_in=login_detail['token'],username=login_detail['username'])
        self.send.start()
        self.send.update_progress.connect(self.logger)
        self.send.error_handler.connect(self.error_handler)
        #############      cancelButton     ####################
        self.cancelButton = QtWidgets.QPushButton(self.main)
        self.cancelButton.setGeometry(QtCore.QRect(100, 350, 111, 61))
        self.cancelButton.setObjectName("cancelButton")
        self.cancelButton.setText(_translate("MainWindow", "Cancel"))
        self.cancelButton.clicked.connect(self.cancel_progress)
        #############      startButton     ####################
        self.startButton = QtWidgets.QPushButton(self.main)
        self.startButton.setGeometry(QtCore.QRect(230, 350, 111, 61))
        self.startButton.setObjectName("startButton")
        self.startButton.setText(_translate("MainWindow", "Start"))
        self.startButton.clicked.connect(self.start_progress)
        #############      pauseButton     ####################
        self.pauseButton = QtWidgets.QPushButton(self.main)
        self.pauseButton.setGeometry(QtCore.QRect(360, 350, 111, 61))
        self.pauseButton.setObjectName("pauseButton")
        self.pauseButton.setText(_translate("MainWindow", "Pause"))
        self.pauseButton.clicked.connect(self.pause_progress)
        self.verticalLayout_2.addWidget(self.main)
        
    
    def pause_progress(self):
        print('pause')
        self.cancelButton.setDisabled(True)
        self.startButton.setEnabled(True)
        self.pauseButton.setEnabled(True)
        self.send.wait()
    
    def start_progress(self):
        self.cancelButton.setEnabled(True)
        self.send.start()
    
    def cancel_progress(self):
        self.cancelButton.setDisabled(True)
        self.send.exit()
        
    
    
    def logger(self,message):
        try :
            self.plainTextEdit.appendPlainText(message)
        except:
            pass
    def error_handler(self,message):    
        self.msg = QMessageBox()
        self.msg.setText(message)
        self.msg.setWindowTitle("Info")
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.exec()

    def tokenUI(self):
        _translate = QtCore.QCoreApplication.translate
        self.verticalLayout_2.removeWidget(self.main)
        # configure Buttons
        self.tokenButton.setDisabled(True)
        self.aboutButton.setEnabled(True)
        self.settingButton.setEnabled(True)
        self.loginButton.setEnabled(True)
        #################################
        self.main = QtWidgets.QWidget(self.verticalLayoutWidget_2)
        self.main.setObjectName("main")
        #############      token_lable     ####################
        self.token_lable = QtWidgets.QLabel(self.main)
        self.token_lable.setGeometry(QtCore.QRect(130, 162, 60, 60))
        self.token_lable.setObjectName("token_lable")
        self.token_lineEdit = QtWidgets.QLineEdit(self.main)
        self.token_lineEdit.setGeometry(QtCore.QRect(200, 180, 400, 30))
        self.token_lineEdit.setObjectName("token_lineEdit")
        #############      username_lable     ####################        
        self.username_lable = QtWidgets.QLabel(self.main)
        self.username_lable.setGeometry(QtCore.QRect(120, 102, 60, 60))
        self.username_lable.setObjectName("username_lable")
        self.username_lineEdit = QtWidgets.QLineEdit(self.main)
        self.username_lineEdit.setGeometry(QtCore.QRect(200, 120, 400, 30))
        self.username_lineEdit.setObjectName("username_lineEdit")  
        #############      validateButton     #################### 
        self.validateButton = QtWidgets.QPushButton(self.main)
        self.validateButton.setGeometry(QtCore.QRect(340, 240, 121, 61))
        self.validateButton.setObjectName("validateButton")
        self.validateButton.clicked.connect(self.validateToken)
        ##########################################################
        self.verticalLayout_2.addWidget(self.main)      
        self.token_lable.setText(_translate("MainWindow", "Token : "))
        self.username_lable.setText(_translate("MainWindow", "Username : "))
        self.validateButton.setText(_translate("MainWindow", "Validate"))    
    
    def validateToken(self):
        login_detail['username'] = self.username_lineEdit.text()
        login_detail['token'] = self.token_lineEdit.text()
        self.token = TokenThread(token_in=login_detail['token'],username=login_detail['username'])
        self.token.start()
        self.token.update_progress.connect(self.token_notif)

    def token_notif(self,message):
        self.msg = QMessageBox()
        self.msg.setText(message)
        self.msg.setWindowTitle("Info")
        self.msg.setStandardButtons(QMessageBox.Ok)
        self.msg.exec()
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.loginButton.setText(_translate("MainWindow", "Login"))
        self.tokenButton.setText(_translate("MainWindow", "Token"))
        self.exitButton.setText(_translate("MainWindow", "exit"))
        self.logButton.setText(_translate("MainWindow", "Log"))
        self.aboutButton.setText(_translate("MainWindow", "About"))
        self.settingButton.setText(_translate("MainWindow", "Setting"))
        self.usage.setText(_translate("MainWindow", "<html><head/><body><p>1. Put your numbers to numbers.txt file</p><p>2. Insert your token</p><p>3. Send message</p></body></html>"))
        self.label.setText(_translate("MainWindow", "<html><head/><body><p><span style=\" font-size:11pt;\">Usage : </span></p></body></html>"))
        self.author.setText(_translate("MainWindow", "Alizare0017"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
